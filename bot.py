import os
import tempfile
import logging
import datetime
import requests
import subprocess

from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters


# ---------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(message)s",
    level=logging.INFO
)
logger = logging.getLogger("tg-transcriber")


# ---------- –ö–æ–Ω—Ñ–∏–≥ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ----------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ASR_PROVIDER = os.getenv("ASR_PROVIDER", "deepgram").lower()
DEEPGRAM_API_KEY = os.getenv("DEEPGRAM_API_KEY")
ASR_DIARIZE = os.getenv("ASR_DIARIZE", "false").lower() in ("1", "true", "yes", "y")

if not TELEGRAM_TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
if ASR_PROVIDER == "deepgram" and not DEEPGRAM_API_KEY:
    raise RuntimeError("–î–ª—è Deepgram —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è DEEPGRAM_API_KEY.")


# ---------- –ù–µ–±–æ–ª—å—à–∏–µ —É—Ç–∏–ª–∏—Ç—ã ----------
def ensure_min_size(path: str, min_bytes: int = 1_000_000) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π/HTML –∏ –¥–æ–∫–∞—á–∞–ª—Å—è —Ö–æ—Ç—è –±—ã –¥–æ 1 –ú–ë."""
    if not os.path.exists(path) or os.path.getsize(path) < min_bytes:
        raise RuntimeError("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –∏–ª–∏ –Ω–µ –¥–æ–∫–∞—á–∞–ª—Å—è (< 1 –ú–ë).")


def ffmpeg_extract_audio(input_path: str, audio_path: str) -> None:
    """–ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ –≤ WAV –º–æ–Ω–æ 16 –∫–ì—Ü —á–µ—Ä–µ–∑ ffmpeg."""
    cmd = [
        "ffmpeg", "-y",
        "-i", input_path,
        "-vn",
        "-ac", "1",
        "-ar", "16000",
        audio_path
    ]
    proc = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if proc.returncode != 0:
        tail = proc.stderr.decode(errors="ignore")[-1200:]
        raise RuntimeError(f"ffmpeg –Ω–µ —Å–º–æ–≥ –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ.\n{tail}")


def download_from_link(link: str, dest_path: str) -> None:
    """–ö–∞—á–∞–µ–º –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ. –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∞ HTML-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Äî –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É."""
    headers = {"User-Agent": "Mozilla/5.0"}
    with requests.get(link, headers=headers, stream=True, timeout=120) as r:
        ctype = (r.headers.get("Content-Type") or "").lower()
        if r.status_code != 200 or "html" in ctype:
            raise RuntimeError("–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º. –ù—É–∂–Ω–∞ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª.")
        with open(dest_path, "wb") as f:
            for chunk in r.iter_content(chunk_size=1024 * 1024):
                if chunk:
                    f.write(chunk)


def transcribe_deepgram(wav_path: str) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ Deepgram –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç (—Å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–µ–π –ø–æ –∂–µ–ª–∞–Ω–∏—é)."""
    params = {
        "smart_format": "true",
        "punctuate": "true",
        "paragraphs": "true",
        "diarize": "true" if ASR_DIARIZE else "false",
        "language": "ru"
    }
    headers = {"Authorization": f"Token {DEEPGRAM_API_KEY}"}
    with open(wav_path, "rb") as f:
        r = requests.post(
            "https://api.deepgram.com/v1/listen",
            params=params,
            headers=headers,
            data=f,
            timeout=3600
        )
    if r.status_code >= 300:
        msg = r.text[:600]
        raise RuntimeError(f"Deepgram –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {r.status_code}:\n{msg}")

    data = r.json()
    try:
        alts = data["results"]["channels"][0]["alternatives"]
        # –µ—Å–ª–∏ Deepgram –¥–∞–ª –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã ‚Äî —Å–∫–ª–µ–∏–≤–∞–µ–º
        paragraphs = alts[0].get("paragraphs", {}).get("paragraphs")
        if paragraphs:
            parts = []
            for p in paragraphs:
                text = (p.get("text") or "").strip()
                if not text:
                    continue
                if ASR_DIARIZE:
                    spk = p.get("speaker")
                    if spk is not None:
                        parts.append(f"–°–ø–∏–∫–µ—Ä {spk}: {text}")
                    else:
                        parts.append(text)
                else:
                    parts.append(text)
            return "\n\n".join(parts).strip()

        # –∏–Ω–∞—á–µ –æ–±—ã—á–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞
        return (alts[0].get("transcript") or "").strip()
    except Exception:
        return ""


# ---------- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ----------
async def process_local_media(local_path: str, update: Update) -> None:
    await update.message.reply_text("‚è≥ –ò–∑–≤–ª–µ–∫–∞—é –∞—É–¥–∏–æ (ffmpeg)‚Ä¶")
    with tempfile.TemporaryDirectory() as tmpdir:
        wav_path = os.path.join(tmpdir, "audio.wav")
        ffmpeg_extract_audio(local_path, wav_path)

        await update.message.reply_text("‚è≥ –†–∞—Å–ø–æ–∑–Ω–∞—é (Deepgram)‚Ä¶")
        text = transcribe_deepgram(wav_path)
        if not text:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")
            return

        now = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M")
        out_path = os.path.join(tmpdir, f"transcript_{now}.txt")
        with open(out_path, "w", encoding="utf-8") as f:
            f.write(text)

        with open(out_path, "rb") as f:
            await update.message.reply_document(
                document=InputFile(f, filename=os.path.basename(out_path))
            )
        await update.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        msg = update.message
        if not msg:
            return

        # --- –µ—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –º–µ–¥–∏–∞ (–≤–∏–¥–µ–æ/–∞—É–¥–∏–æ/–¥–æ–∫—É–º–µ–Ω—Ç —Å –º–µ–¥–∏–∞) ---
        media = msg.video or msg.voice or msg.audio or msg.document
        if media:
            await msg.reply_text("‚è≥ –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª‚Ä¶")
            tg_file = await context.bot.get_file(media.file_id)
            with tempfile.TemporaryDirectory() as tmpdir:
                in_path = os.path.join(tmpdir, "input.bin")
                await tg_file.download_to_drive(in_path)
                ensure_min_size(in_path)
                await process_local_media(in_path, update)
            return

        # --- –µ—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ —Å—Å—ã–ª–∫—É –≤ —Ç–µ–∫—Å—Ç–µ/–ø–æ–¥–ø–∏—Å–∏ ---
        text = (msg.text or "") + " " + (msg.caption or "")
        link = next((w for w in text.split() if w.startswith("http")), None)
        if link:
            await msg.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –ø–æ —Å—Å—ã–ª–∫–µ‚Ä¶")
            with tempfile.TemporaryDirectory() as tmpdir:
                in_path = os.path.join(tmpdir, "downloaded.bin")
                download_from_link(link, in_path)
                ensure_min_size(in_path)
                await process_local_media(in_path, update)
            return

        # --- –∏–Ω–∞—á–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞ ---
        await msg.reply_text("‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ –∏–ª–∏ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª. –Ø –ø—Ä–∏—à–ª—é —Ç–µ–∫—Å—Ç –≤ .txt.")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", e)
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def main() -> None:
    logger.info("üì° –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞‚Ä¶ (ASR_PROVIDER=%s, DIARIZE=%s)", ASR_PROVIDER, ASR_DIARIZE)
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    # –û–¥–∏–Ω —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —á—Ç–æ –ø—Ä–∏—à–ª–æ
    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_message))
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π‚Ä¶")
    app.run_polling()


if __name__ == "__main__":
    main()
