import os 
import tempfile
import logging
import datetime
import requests
import time
from moviepy.editor import VideoFileClip
from pydub import AudioSegment
from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes
import whisper

TELEGRAM_TOKEN = "7557009279:AAH9htYr2GVzCH9u5f9kGxgaoqrOSN0xkNQ"

logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

model = whisper.load_model("medium")

def extract_direct_download_link(link: str) -> str:
    if "drive.google.com" in link and "/file/d/" in link:
        file_id = link.split("/file/d/")[1].split("/")[0]
        return f"https://drive.google.com/uc?export=download&id={file_id}"
    return link

def is_audio_file(file_path):
    return any(file_path.lower().endswith(ext) for ext in ['.mp3', '.wav', '.m4a', '.aac', '.flac', '.ogg'])

async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    media = update.message.video or update.message.voice or update.message.audio or update.message.document
    if not media:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞.")
        return

    file = await context.bot.get_file(media.file_id)
    with tempfile.TemporaryDirectory() as tmpdir:
        input_path = os.path.join(tmpdir, "input")
        audio_path = os.path.join(tmpdir, "audio.wav")

        await file.download_to_drive(input_path)
        await update.message.reply_text("‚è≥ –§–∞–π–ª —Å–∫–∞—á–∞–Ω. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...")

        try:
            if is_audio_file(input_path):
                audio = AudioSegment.from_file(input_path)
                audio.export(audio_path, format="wav")
            else:
                for _ in range(10):
                    try:
                        clip = VideoFileClip(input_path)
                        break
                    except OSError:
                        time.sleep(1)
                else:
                    raise Exception("–§–∞–π–ª –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω.")
                clip.audio.write_audiofile(audio_path, verbose=False, logger=None)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")
            return

        await update.message.reply_text("‚è≥ –†–∞—Å–ø–æ–∑–Ω–∞–µ–º...")

        try:
            result = model.transcribe(audio_path, fp16=False, verbose=False, language='ru')
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: {e}")
            return

        text = result.get("text", "")
        if not text.strip():
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")
            return

        now = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M")
        txt_path = os.path.join(tmpdir, f"transcript_{now}.txt")
        with open(txt_path, "w", encoding="utf-8") as f:
            f.write(text)

        with open(txt_path, "rb") as f:
            await update.message.reply_document(document=InputFile(f, filename=os.path.basename(txt_path)))
        await update.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text or update.message.caption or ""
    link = next((word for word in text.split() if word.startswith("http")), None)

    if not link:
        await update.message.reply_text("‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ –Ω–∞–ø—Ä—è–º—É—é.")
        return

    await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª –ø–æ —Å—Å—ã–ª–∫–µ...")

    try:
        with tempfile.TemporaryDirectory() as tmpdir:
            local_path = os.path.join(tmpdir, "downloaded.mp4")
            audio_path = os.path.join(tmpdir, "audio.wav")

            link = extract_direct_download_link(link)
            headers = {"User-Agent": "Mozilla/5.0"}
            response = requests.get(link, headers=headers, stream=True)

            content_type = response.headers.get("Content-Type", "")
            if "html" in content_type or response.status_code != 200:
                raise Exception("–°–∫–∞—á–∞–ª—Å—è HTML, –∞ –Ω–µ –≤–∏–¥–µ–æ. –í–æ–∑–º–æ–∂–Ω–æ, –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")

            with open(local_path, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)

            if os.path.getsize(local_path) < 1_000_000:
                raise Exception("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ –±—ã–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∫–∞—á–∞–Ω.")

            if is_audio_file(local_path):
                audio = AudioSegment.from_file(local_path)
                audio.export(audio_path, format="wav")
            else:
                for _ in range(10):
                    try:
                        clip = VideoFileClip(local_path)
                        break
                    except OSError:
                        time.sleep(1)
                else:
                    raise Exception("MoviePy –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª. –û–Ω –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω.")
                clip.audio.write_audiofile(audio_path, verbose=False, logger=None)

            await update.message.reply_text("‚è≥ –†–∞—Å–ø–æ–∑–Ω–∞–µ–º...")

            result = model.transcribe(audio_path, fp16=False, verbose=False, language='ru')
            text = result.get("text", "")

            if not text.strip():
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")
                return

            now = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M")
            txt_path = os.path.join(tmpdir, f"transcript_{now}.txt")
            with open(txt_path, "w", encoding="utf-8") as f:
                f.write(text)

            with open(txt_path, "rb") as f:
                await update.message.reply_document(document=InputFile(f, filename=os.path.basename(txt_path)))
            await update.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏: {e}")

if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.VIDEO | filters.VOICE | filters.AUDIO | filters.Document.VIDEO | filters.Document.AUDIO, handle_media))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    logger.info("üì° –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()





