import os
import re
import logging
import tempfile
import subprocess
import requests
from urllib.parse import urlparse, parse_qs, urlunparse, urlencode, quote

from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters
from telegram.error import BadRequest

# ===== –õ–û–ì–ò =====
logging.basicConfig(format="%(asctime)s | %(levelname)s | %(message)s", level=logging.INFO)
log = logging.getLogger("asr-bot")

# ===== –ö–û–ù–§–ò–ì =====
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

# –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ (faster-whisper)
WHISPER_MODEL = os.getenv("WHISPER_MODEL", "small")          # tiny/base/small/medium
WHISPER_BEAM_SIZE = int(os.getenv("WHISPER_BEAM_SIZE", "1")) # 1 ‚Äî –±—ã—Å—Ç—Ä–µ–µ
WHISPER_COMPUTE_TYPE = os.getenv("WHISPER_COMPUTE_TYPE", "int8")  # int8 | int8_float16 | float32
LANGUAGE = os.getenv("LANGUAGE", "ru")                       # 'auto' –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è

# –õ–∏–º–∏—Ç –≤–ª–æ–∂–µ–Ω–∏—è –≤ –¢–ì (–æ—Ä–∏–µ–Ω—Ç–∏—Ä)
TELEGRAM_ATTACHMENT_LIMIT = 45 * 1024 * 1024  # 45 –ú–ë

# ===== –£–¢–ò–õ–ò–¢–´ =====
def ensure_min_size(path: str, min_bytes: int = 10_000) -> None:
    if not os.path.exists(path) or os.path.getsize(path) < min_bytes:
        raise RuntimeError(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –∏–ª–∏ –Ω–µ –¥–æ–∫–∞—á–∞–ª—Å—è (< {min_bytes // 1000} –ö–ë).")

def run_ffmpeg(cmd: list) -> None:
    proc = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if proc.returncode != 0:
        tail = proc.stderr.decode(errors="ignore")[-1200:]
        raise RuntimeError(f"ffmpeg –æ—à–∏–±–∫–∞:\n{tail}")

def extract_audio_to_wav16k_mono(src_path: str, dst_wav_path: str) -> None:
    cmd = [
        "ffmpeg", "-y",
        "-i", src_path,
        "-vn",
        "-ac", "1",
        "-ar", "16000",
        "-filter:a", "loudnorm=I=-23:TP=-2:LRA=7",
        dst_wav_path
    ]
    run_ffmpeg(cmd)

# ---------- Google Drive: –¥–µ–ª–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É ----------
def normalize_google_drive(url: str) -> str | None:
    m = re.search(r"drive\.google\.com/.*/file/d/([^/]+)/", url)
    if m:
        fid = m.group(1)
        return f"https://drive.google.com/uc?export=download&id={fid}"
    m = re.search(r"drive\.google\.com/.*[?&]id=([^&]+)", url)
    if m:
        fid = m.group(1)
        return f"https://drive.google.com/uc?export=download&id={fid}"
    return None

# ---------- –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å (–ª—é–±—ã–µ —è–∑—ã–∫–∏/—Ñ–æ—Ä–º–∞—Ç—ã) ----------
PWD_PATTERNS = [
    r"\bpwd\s*[:=]\s*(\S+)",                         # pwd: XXXXX
    r"(?i)\bpasscode\s*[:=]\s*(\S+)",                # passcode: XXXXX
    r"(?i)\bpassword\s*[:=]\s*(\S+)",                # password: XXXXX
    r"(?i)\b—Å–µ–∫—Ä–µ—Ç–Ω[—ã–π–∞—è–µ]\s*–∫–æ–¥\s*[:=]\s*(\S+)",    # –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥: XXXXX
    r"(?i)\b–ø–∞—Ä–æ–ª[—å—è]\s*[:=]\s*(\S+)",               # –ü–∞—Ä–æ–ª—å: XXXXX
]
def extract_pwd_hint(text: str) -> str | None:
    for pat in PWD_PATTERNS:
        m = re.search(pat, text)
        if m:
            return m.group(1).strip()
    return None

# ---------- Zoom: –¥–≤—É—Ö—à–∞–≥–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (share/play -> cookies -> download) ----------
def build_zoom_urls(raw_url: str, pwd_hint: str | None):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (share_url_with_pwd, download_url, referer). –ü–∞—Ä–æ–ª—å –∫–æ–¥–∏—Ä—É–µ–º."""
    p = urlparse(raw_url)
    if "zoom.us" not in p.netloc or "/rec/" not in p.path:
        return None

    q = parse_qs(p.query)
    pwd = q.get("pwd", [None])[0] or pwd_hint
    path_share = p.path
    # share/play -> –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å –¥–ª—è —à–∞–≥–∞ 1 (cookie)
    share_q = dict((k, v[0]) for k, v in q.items() if v and v[0] is not None)

    # –°–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä—É–µ–º download –ø—É—Ç—å
    path_download = path_share.replace("/play", "/download").replace("/share", "/download")
    dl_q = dict(share_q)

    if pwd:
        # –≤–∞–∂–Ω–æ –∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é
        dl_q["pwd"] = quote(pwd, safe="")
        # –∏ –≤ share —Ç–æ–∂–µ –¥–æ–±–∞–≤–∏–º (—á–∞—Å—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π —Ñ–æ—Ä–º—ã)
        share_q["pwd"] = dl_q["pwd"]

    # –ø–æ–ª–µ–∑–Ω–æ —è–≤–Ω–æ –ø—Ä–æ—Å–∏—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
    dl_q["download"] = "1"

    share_url = urlunparse((p.scheme, p.netloc, path_share, "", urlencode(share_q), ""))
    download_url = urlunparse((p.scheme, p.netloc, path_download, "", urlencode(dl_q), ""))

    return share_url, download_url, raw_url  # referer = –∏—Å—Ö–æ–¥–Ω–∞—è share/play —Å—Å—ã–ª–∫–∞

def download_zoom_2step(raw_url: str, pwd_hint: str | None, dest_path: str) -> None:
    built = build_zoom_urls(raw_url, pwd_hint)
    if not built:
        raise RuntimeError("–°—Å—ã–ª–∫–∞ –Ω–µ –ø–æ—Ö–æ–∂–∞ –Ω–∞ Zoom –∑–∞–ø–∏—Å—å.")
    share_url, download_url, referer = built

    headers = {
        "User-Agent": "Mozilla/5.0",
        "Referer": referer
    }
    s = requests.Session()

    # –®–∞–≥ 1: –∑–∞–π—Ç–∏ –Ω–∞ share/play, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å cookies (–∏ –ø–µ—Ä–µ–¥–∞—Ç—å pwd —á–µ—Ä–µ–∑ URL)
    r1 = s.get(share_url, headers=headers, allow_redirects=True, timeout=1800)
    # –ò–Ω–æ–≥–¥–∞ Zoom –≤—Å—ë —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ ‚Äî –≥–ª–∞–≤–Ω–æ–µ, —á—Ç–æ cookies –ø–æ—Å—Ç–∞–≤–∏–ª–∏—Å—å

    # –®–∞–≥ 2: —Å–∫–∞—á–∞—Ç—å download —Å —Ç–µ–º–∏ –∂–µ cookies
    with s.get(download_url, headers=headers, stream=True, allow_redirects=True, timeout=1800) as r2:
        ctype = (r2.headers.get("Content-Type") or "").lower()
        if "html" in ctype or "text/" in ctype:
            raise RuntimeError("Zoom –Ω–µ –≤—ã–¥–∞–ª —Ñ–∞–π–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å –∏ –≤–∫–ª—é—á–µ–Ω–æ –ª–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∑–∞–ø–∏—Å–∏.")
        total = 0
        with open(dest_path, "wb") as f:
            for chunk in r2.iter_content(chunk_size=1024 * 1024):
                if chunk:
                    f.write(chunk)
                    total += len(chunk)
        if total < 10_000:
            raise RuntimeError("Zoom –≤—ã–¥–∞–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª (<10 –ö–ë).")

# ---------- –û–±—ã—á–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ –ø—Ä—è–º–æ–º—É URL ----------
def download_http(link: str, dest_path: str, referer: str | None = None) -> None:
    headers = {"User-Agent": "Mozilla/5.0"}
    if referer:
        headers["Referer"] = referer
    with requests.get(link, headers=headers, stream=True, timeout=1800, allow_redirects=True) as r:
        ctype = (r.headers.get("Content-Type") or "").lower()
        if "html" in ctype or "text/" in ctype:
            raise RuntimeError("–°–∫–∞—á–∞–ª–∞—Å—å HTML-—Å—Ç—Ä–∞–Ω–∏—Ü–∞. –ù—É–∂–Ω–∞ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª.")
        total = 0
        with open(dest_path, "wb") as f:
            for chunk in r.iter_content(chunk_size=1024 * 1024):
                if chunk:
                    f.write(chunk)
                    total += len(chunk)
        if total < 10_000:
            raise RuntimeError("–ü–æ —Å—Å—ã–ª–∫–µ –ø—Ä–∏—à—ë–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª (<10 –ö–ë).")

# ===== –õ–û–ö–ê–õ–¨–ù–û–ï –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–ï (faster-whisper) =====
_faster_model = None
def load_faster_whisper():
    global _faster_model
    if _faster_model is None:
        from faster_whisper import WhisperModel
        log.info("–ó–∞–≥—Ä—É–∂–∞—é faster-whisper: model=%s compute=%s", WHISPER_MODEL, WHISPER_COMPUTE_TYPE)
        language = None if LANGUAGE.lower() == "auto" else LANGUAGE
        _faster_model = (WhisperModel(
            WHISPER_MODEL,
            device="cpu",
            compute_type=WHISPER_COMPUTE_TYPE,
            cpu_threads=max(1, os.cpu_count() // 2)
        ), language)
    return _faster_model

def transcribe_local(wav_path: str) -> str:
    (model, language) = load_faster_whisper()
    segments, _ = model.transcribe(
        wav_path,
        language=language,
        beam_size=WHISPER_BEAM_SIZE,
        vad_filter=False,
        condition_on_previous_text=False,
        word_timestamps=False
    )
    parts = []
    for seg in segments:
        t = (seg.text or "").strip()
        if t:
            parts.append(t)
    return "\n".join(parts).strip()

# ===== –•–≠–ù–î–õ–ï–†–´ =====
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    msg = update.message
    if not msg:
        return

    # 0) –°—Å—ã–ª–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ/–ø–æ–¥–ø–∏—Å–∏
    text_all = (msg.text or "") + " " + (msg.caption or "")
    m_url = re.search(r"(https?://\S+)", text_all)
    pwd_hint = extract_pwd_hint(text_all)

    if m_url:
        raw_url = m_url.group(1)
        await msg.reply_text("üåê –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª –ø–æ —Å—Å—ã–ª–∫–µ‚Ä¶")

        with tempfile.TemporaryDirectory() as tmpdir:
            src = os.path.join(tmpdir, "download.bin")
            try:
                if "zoom.us/rec/" in raw_url:
                    # Zoom: –¥–≤—É—Ö—à–∞–≥–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å –ø–∞—Ä–æ–ª–µ–º/–∫—É–∫–∏
                    download_zoom_2step(raw_url, pwd_hint, src)
                else:
                    # Google Drive/–¥—Ä—É–≥–∏–µ ‚Äî –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º Drive, –∏–Ω–∞—á–µ –∫–∞—á–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    gdrive = normalize_google_drive(raw_url)
                    norm_url = gdrive or raw_url
                    download_http(norm_url, src)
                ensure_min_size(src, 10_000)
            except Exception as e:
                await msg.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {err}\n\n"
                    "–ü–æ–¥—Å–∫–∞–∑–∫–∏:\n"
                    "‚Ä¢ –î–ª—è Zoom –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–ø–∏—Å—å –∏ –ø–∞—Ä–æ–ª—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                    "  pwd: ABCD1234  –∏–ª–∏  –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥: ABCD1234\n"
                    "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –∑–∞–ø–∏—Å–∏ –≤–∫–ª—é—á–µ–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ ¬´Allow viewers to download¬ª."
                    .format(err=e)
                )
                return
            await process_local_file(src, msg)
        return

    # 1) –í–ª–æ–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏)
    media = msg.video or msg.voice or msg.audio or msg.document
    if media:
        size = getattr(media, "file_size", None)
        if size and size > TELEGRAM_ATTACHMENT_LIMIT:
            await msg.reply_text("‚ùóÔ∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏—è. –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É (Zoom/Google Drive/–¥—Ä—É–≥–æ–π —Ö–æ—Å—Ç).")
            return

        await msg.reply_text("üì• –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª‚Ä¶")
        tg_file = await context.bot.get_file(media.file_id)
        with tempfile.TemporaryDirectory() as tmpdir:
            src = os.path.join(tmpdir, "input.bin")
            await tg_file.download_to_drive(src)
            try:
                ensure_min_size(src, 10_000)
            except Exception as e:
                await msg.reply_text(f"‚ùå {e}")
                return
            await process_local_file(src, msg)
        return

    # 2) –ü–æ–¥—Å–∫–∞–∑–∫–∞
    await msg.reply_text("‚ÑπÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ –≤–ª–æ–∂–µ–Ω–∏–µ–º (–µ—Å–ª–∏ –Ω–µ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–µ) –ò–õ–ò —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª.\n"
                         "–ü–æ–¥–¥–µ—Ä–∂–∫–∞: Google Drive (–æ–±—ã—á–Ω–∞—è —Å—Å—ã–ª–∫–∞), Zoom (–¥–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏).")

async def process_local_file(src: str, msg):
    try:
        await msg.reply_text("üéô –ò–∑–≤–ª–µ–∫–∞—é –∞—É–¥–∏–æ (ffmpeg)‚Ä¶")
        with tempfile.TemporaryDirectory() as tmpdir:
            wav = os.path.join(tmpdir, "audio.wav")
            extract_audio_to_wav16k_mono(src, wav)

            await msg.reply_text("ü§ñ –†–∞—Å–ø–æ–∑–Ω–∞—é (–ª–æ–∫–∞–ª—å–Ω–æ, faster-whisper)‚Ä¶")
            text_out = transcribe_local(wav)

            if text_out:
                out_path = os.path.join(tmpdir, "transcript.txt")
                with open(out_path, "w", encoding="utf-8") as f:
                    f.write(text_out)
                try:
                    await msg.reply_document(InputFile(out_path, filename="transcript.txt"))
                except BadRequest:
                    await msg.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ. –¢–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω—ã–π ‚Äî –ø—Ä–∏—à–ª—é —á–∞—Å—Ç—è–º–∏.")
                    with open(out_path, "r", encoding="utf-8") as f:
                        data = f.read()
                    for i in range(0, len(data), 3500):
                        await msg.reply_text(data[i:i+3500])
                await msg.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ.")
            else:
                await msg.reply_text("‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –ø—É—Å—Ç–æ–π/–±–µ–∑ –∑–≤—É–∫–∞.")
    except Exception as e:
        await msg.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# ===== –ó–ê–ü–£–°–ö =====
def main():
    log.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞‚Ä¶ WHISPER_MODEL=%s, compute=%s, language=%s", WHISPER_MODEL, WHISPER_COMPUTE_TYPE, LANGUAGE)
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_message))
    log.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π‚Ä¶")
    app.run_polling()

if __name__ == "__main__":
    main()
