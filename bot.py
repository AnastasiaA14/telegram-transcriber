import os
import re
import logging
import tempfile
import subprocess
import requests

from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters

# ===== –õ–û–ì–ò =====
logging.basicConfig(format="%(asctime)s | %(levelname)s | %(message)s", level=logging.INFO)
log = logging.getLogger("asr-bot")

# ===== –ö–û–ù–§–ò–ì =====
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

# –ü—Ä–æ–≤–∞–π–¥–µ—Ä: 'local' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. (Deepgram –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ø–æ–∑–∂–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ASR_PROVIDER=deepgram)
ASR_PROVIDER = os.getenv("ASR_PROVIDER", "local").lower()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ faster-whisper
WHISPER_MODEL = os.getenv("WHISPER_MODEL", "small")   # –≤–∞—Ä–∏–∞–Ω—Ç—ã: tiny/base/small/medium
WHISPER_BEAM_SIZE = int(os.getenv("WHISPER_BEAM_SIZE", "1"))  # 1 ‚Äî –±—ã—Å—Ç—Ä–µ–µ
WHISPER_COMPUTE_TYPE = os.getenv("WHISPER_COMPUTE_TYPE", "int8")  # int8 | int8_float16 | float32
LANGUAGE = os.getenv("LANGUAGE", "ru")  # 'ru' –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏. –ü–æ—Å—Ç–∞–≤—å 'auto' ‚Äî –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.

# Deepgram (–Ω–∞ –±—É–¥—É—â–µ–µ, –º–æ–∂–Ω–æ –Ω–µ –∑–∞–¥–∞–≤–∞—Ç—å)
DEEPGRAM_API_KEY = os.getenv("DEEPGRAM_API_KEY")
ASR_DIARIZE = os.getenv("ASR_DIARIZE", "false").lower() in ("1", "true", "yes")

# ===== –£–¢–ò–õ–ò–¢–´ =====
def ensure_min_size(path: str, min_bytes: int = 10_000) -> None:
    """–†–∞–Ω–Ω–∏–π –æ—Ç—Å–µ–≤ –ø—É—Å—Ç—ã—Ö/–±–∏—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤ (10 –ö–ë –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)."""
    if not os.path.exists(path) or os.path.getsize(path) < min_bytes:
        raise RuntimeError(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –∏–ª–∏ –Ω–µ –¥–æ–∫–∞—á–∞–ª—Å—è (< {min_bytes // 1000} –ö–ë).")

def run_ffmpeg(cmd: list) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ–º ffmpeg –∏ –ø–æ–¥–Ω–∏–º–∞–µ–º –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏."""
    proc = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if proc.returncode != 0:
        tail = proc.stderr.decode(errors="ignore")[-1200:]
        raise RuntimeError(f"ffmpeg –æ—à–∏–±–∫–∞:\n{tail}")

def extract_audio_to_wav16k_mono(src_path: str, dst_wav_path: str) -> None:
    """–í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∞—É–¥–∏–æ –≤ WAV 16–∫–ì—Ü/–º–æ–Ω–æ. –î–æ–±–∞–≤–ª—è–µ–º –ª—ë–≥–∫—É—é –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –≥—Ä–æ–º–∫–æ—Å—Ç–∏."""
    cmd = [
        "ffmpeg", "-y",
        "-i", src_path,
        "-vn",
        "-ac", "1",
        "-ar", "16000",
        "-filter:a", "loudnorm=I=-23:TP=-2:LRA=7",
        dst_wav_path
    ]
    run_ffmpeg(cmd)

def normalize_link(url: str) -> str:
    """–ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –æ–±—â–∏–µ —Å—Å—ã–ª–∫–∏ –≤ '–ø—Ä—è–º—ã–µ' –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."""
    try:
        url = url.strip()

        # Nextcloud/ownCloud –ø—É–±–ª–∏—á–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –≤–∏–¥–∞ .../s/<id> -> –¥–æ–±–∞–≤–ª—è–µ–º /download
        if "/s/" in url and "download" not in url:
            if not url.endswith("/download"):
                url = url.rstrip("/") + "/download"

        # Google Drive:
        # 1) /file/d/<ID>/view?... -> /uc?export=download&id=<ID>
        m = re.search(r"drive\.google\.com/.*/file/d/([^/]+)/", url)
        if m:
            fid = m.group(1)
            return f"https://drive.google.com/uc?export=download&id={fid}"
        # 2) open?id=<ID> -> /uc?export=download&id=<ID>
        m = re.search(r"drive\.google\.com/.*[?&]id=([^&]+)", url)
        if m:
            fid = m.group(1)
            return f"https://drive.google.com/uc?export=download&id={fid}"

        return url
    except Exception:
        return url

def download_from_link(link: str, dest_path: str) -> None:
    """–ö–∞—á–∞–µ–º –ø–æ —Å—Å—ã–ª–∫–µ (stream). –û—Ç—Å–µ–∫–∞–µ–º HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–µ–ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞)."""
    link = normalize_link(link)
    headers = {"User-Agent": "Mozilla/5.0"}
    with requests.get(link, headers=headers, stream=True, timeout=300, allow_redirects=True) as r:
        ctype = (r.headers.get("Content-Type") or "").lower()
        # –ï—Å–ª–∏ —è–≤–Ω–æ HTML/—Ç–µ–∫—Å—Ç ‚Äî —ç—Ç–æ –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        if "html" in ctype or "text/" in ctype:
            raise RuntimeError("–°–∫–∞—á–∞–ª–∞—Å—å HTML-—Å—Ç—Ä–∞–Ω–∏—Ü–∞. –ù—É–∂–Ω–∞ –ü–†–Ø–ú–ê–Ø —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª (–∏–ª–∏ Nextcloud —Å /download).")
        total = 0
        with open(dest_path, "wb") as f:
            for chunk in r.iter_content(chunk_size=1024 * 1024):
                if chunk:
                    f.write(chunk)
                    total += len(chunk)
        if total < 10_000:
            raise RuntimeError("–ü–æ —Å—Å—ã–ª–∫–µ –ø—Ä–∏—à—ë–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª (<10 –ö–ë). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É.")

# ===== –õ–û–ö–ê–õ–¨–ù–û–ï –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–ï (faster-whisper) =====
_faster_model = None
def load_faster_whisper():
    global _faster_model
    if _faster_model is None:
        from faster_whisper import WhisperModel
        log.info("–ó–∞–≥—Ä—É–∂–∞—é faster-whisper: model=%s compute=%s", WHISPER_MODEL, WHISPER_COMPUTE_TYPE)
        language = None if LANGUAGE.lower() == "auto" else LANGUAGE
        _faster_model = (WhisperModel(
            WHISPER_MODEL,
            device="cpu",
            compute_type=WHISPER_COMPUTE_TYPE,
            cpu_threads=max(1, os.cpu_count() // 2)
        ), language)
    return _faster_model

def transcribe_local(wav_path: str) -> str:
    (model, language) = load_faster_whisper()
    segments, info = model.transcribe(
        wav_path,
        language=language,                    # None -> –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        beam_size=WHISPER_BEAM_SIZE,
        vad_filter=False,
        condition_on_previous_text=False,
        word_timestamps=False
    )
    parts = []
    for seg in segments:
        t = (seg.text or "").strip()
        if t:
            parts.append(t)
    return "\n".join(parts).strip()

# ===== –û–ë–õ–ê–ß–ù–û–ï –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–ï (Deepgram, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ) =====
def transcribe_deepgram(wav_path: str) -> str:
    headers = {"Authorization": f"Token {DEEPGRAM_API_KEY}", "Content-Type": "audio/wav"}
    params = {
        "smart_format": "true",
        "punctuate": "true",
        "paragraphs": "true",
        "diarize": "true" if ASR_DIARIZE else "false",
        "language": LANGUAGE if LANGUAGE.lower() != "auto" else "ru"
    }
    with open(wav_path, "rb") as f:
        r = requests.post("https://api.deepgram.com/v1/listen", headers=headers, params=params, data=f, timeout=1800)
    if r.status_code >= 300:
        raise RuntimeError(f"Deepgram –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É {r.status_code}:\n{r.text[:600]}")
    data = r.json()
    try:
        alts = data["results"]["channels"][0]["alternatives"]
        paragraphs = alts[0].get("paragraphs", {}).get("paragraphs") or []
        if paragraphs:
            out = []
            for p in paragraphs:
                txt = (p.get("text") or "").strip()
                if not txt:
                    continue
                if ASR_DIARIZE and p.get("speaker") is not None:
                    out.append(f"–°–ø–∏–∫–µ—Ä {p['speaker']}: {txt}")
                else:
                    out.append(txt)
            if out:
                return "\n\n".join(out).strip()
        return (alts[0].get("transcript") or "").strip()
    except Exception:
        return ""

# ===== –•–≠–ù–î–õ–ï–†–´ =====
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    msg = update.message
    if not msg:
        return

    # 1) –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –≤–ª–æ–∂–µ–Ω–∏–µ (–≤–∏–¥–µ–æ/–∞—É–¥–∏–æ/–¥–æ–∫—É–º–µ–Ω—Ç)
    media = msg.video or msg.voice or msg.audio or msg.document
    if media:
        await msg.reply_text("üì• –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª‚Ä¶")
        tg_file = await context.bot.get_file(media.file_id)
        with tempfile.TemporaryDirectory() as tmpdir:
            src = os.path.join(tmpdir, "input.bin")
            await tg_file.download_to_drive(src)
            try:
                ensure_min_size(src, 10_000)
            except Exception as e:
                await msg.reply_text(f"‚ùå {e}")
                return

            await msg.reply_text("üéô –ò–∑–≤–ª–µ–∫–∞—é –∞—É–¥–∏–æ (ffmpeg)‚Ä¶")
            wav = os.path.join(tmpdir, "audio.wav")
            try:
                extract_audio_to_wav16k_mono(src, wav)
            except Exception as e:
                await msg.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
                return

            try:
                if ASR_PROVIDER == "deepgram" and DEEPGRAM_API_KEY:
                    await msg.reply_text("ü§ñ –†–∞—Å–ø–æ–∑–Ω–∞—é (Deepgram)‚Ä¶")
                    text = transcribe_deepgram(wav)
                else:
                    await msg.reply_text("ü§ñ –†–∞—Å–ø–æ–∑–Ω–∞—é (–ª–æ–∫–∞–ª—å–Ω–æ, faster-whisper)‚Ä¶")
                    text = transcribe_local(wav)
            except Exception as e:
                await msg.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
                return

            if text:
                out_path = os.path.join(tmpdir, "transcript.txt")
                with open(out_path, "w", encoding="utf-8") as f:
                    f.write(text)
                await msg.reply_document(InputFile(out_path, filename="transcript.txt"))
                await msg.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ.")
            else:
                await msg.reply_text("‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å—å –ø–æ–¥–ª–∏–Ω–Ω–µ–µ/–≥—Ä–æ–º—á–µ –∏–ª–∏ —á–∏—â–µ –∏—Å—Ç–æ—á–Ω–∏–∫.")
        return

    # 2) –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ —Å—Å—ã–ª–∫—É (–≤ —Ç–µ–∫—Å—Ç–µ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏)
    text = (msg.text or "") + " " + (msg.caption or "")
    m = re.search(r"(https?://\S+)", text)
    if m:
        link = m.group(1)
        await msg.reply_text("üåê –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª –ø–æ —Å—Å—ã–ª–∫–µ‚Ä¶")
        with tempfile.TemporaryDirectory() as tmpdir:
            src = os.path.join(tmpdir, "download.bin")
            try:
                download_from_link(link, src)
                ensure_min_size(src, 10_000)
            except Exception as e:
                await msg.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ —Å—Å—ã–ª–∫–µ: {e}")
                return

            await msg.reply_text("üéô –ò–∑–≤–ª–µ–∫–∞—é –∞—É–¥–∏–æ (ffmpeg)‚Ä¶")
            wav = os.path.join(tmpdir, "audio.wav")
            try:
                extract_audio_to_wav16k_mono(src, wav)
            except Exception as e:
                await msg.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
                return

            try:
                if ASR_PROVIDER == "deepgram" and DEEPGRAM_API_KEY:
                    await msg.reply_text("ü§ñ –†–∞—Å–ø–æ–∑–Ω–∞—é (Deepgram)‚Ä¶")
                    text_out = transcribe_deepgram(wav)
                else:
                    await msg.reply_text("ü§ñ –†–∞—Å–ø–æ–∑–Ω–∞—é (–ª–æ–∫–∞–ª—å–Ω–æ, faster-whisper)‚Ä¶")
                    text_out = transcribe_local(wav)
            except Exception as e:
                await msg.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
                return

            if text_out:
                out_path = os.path.join(tmpdir, "transcript.txt")
                with open(out_path, "w", encoding="utf-8") as f:
                    f.write(text_out)
                await msg.reply_document(InputFile(out_path, filename="transcript.txt"))
                await msg.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ.")
            else:
                await msg.reply_text("‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–∞–º —Ñ–∞–π–ª, –Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É.")
        return

    # 3) –ü–æ–¥—Å–∫–∞–∑–∫–∞
    await msg.reply_text("‚ÑπÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ –≤–ª–æ–∂–µ–Ω–∏–µ–º –ò–õ–ò –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª (Google Drive/Nextcloud/–ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞).")

# ===== –ó–ê–ü–£–°–ö =====
def main():
    log.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞‚Ä¶ ASR_PROVIDER=%s, WHISPER_MODEL=%s, compute=%s, language=%s",
             ASR_PROVIDER, WHISPER_MODEL, WHISPER_COMPUTE_TYPE, LANGUAGE)
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_message))
    log.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π‚Ä¶")
    app.run_polling()

if __name__ == "__main__":
    main()
