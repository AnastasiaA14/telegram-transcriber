import os
import re
import requests
import tempfile
import subprocess
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes
import torch
import whisper

# ========= –ù–ê–°–¢–†–û–ô–ö–ò =========
BOT_TOKEN = os.getenv("BOT_TOKEN")
ASR_MODEL = "small"        # –ú–æ–¥–µ–ª—å Whisper
LANGUAGE = "ru"            # –Ø–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
COMPUTE_TYPE = "int8"      # int8 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏

# ======== –ó–ê–ì–†–£–ó–ö–ê –ú–û–î–ï–õ–ò ========
print("–ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å Whisper...")
model = whisper.load_model(ASR_MODEL, device="cpu")
print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

# ======== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ========

def extract_gdrive_id(url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ID —Ñ–∞–π–ª–∞ Google Drive –∏–∑ —Å—Å—ã–ª–∫–∏"""
    match = re.search(r"/d/([a-zA-Z0-9_-]{10,})", url)
    if match:
        return match.group(1)
    return None

def download_file(url):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å"""
    tmp_dir = tempfile.mkdtemp()
    file_path = os.path.join(tmp_dir, "input_file")

    if "drive.google.com" in url:
        file_id = extract_gdrive_id(url)
        if not file_id:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID —Ñ–∞–π–ª–∞ Google Drive. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –≤–∏–¥–∞: https://drive.google.com/file/d/FILE_ID/view?usp=sharing")
        gdrive_url = f"https://drive.google.com/uc?export=download&id={file_id}"
        r = requests.get(gdrive_url, stream=True)
        if r.status_code != 200:
            raise ValueError(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å Google Drive: {r.status_code}")
        with open(file_path, "wb") as f:
            for chunk in r.iter_content(chunk_size=8192):
                f.write(chunk)
        return file_path

    elif "zoom.us" in url:
        raise ValueError("Zoom –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å –ø—Ä—è–º—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–æ—Å—Ç—É–ø–æ–º.")

    else:
        # –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞
        r = requests.get(url, stream=True)
        if r.status_code != 200:
            raise ValueError(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {r.status_code}")
        with open(file_path, "wb") as f:
            for chunk in r.iter_content(chunk_size=8192):
                f.write(chunk)
        return file_path

async def transcribe_file(file_path):
    """–†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Ä–µ—á—å –∏–∑ —Ñ–∞–π–ª–∞"""
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ wav –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    wav_path = file_path + ".wav"
    subprocess.run(["ffmpeg", "-y", "-i", file_path, "-ar", "16000", "-ac", "1", wav_path], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    print("‚ñ∂ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ...")
    result = model.transcribe(wav_path, language=LANGUAGE)
    text = result["text"].strip()
    print("‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    return text

# ======== –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ========

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        message = update.message.text.strip()
        await update.message.reply_text("üåê –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...")

        file_path = download_file(message)

        if os.path.getsize(file_path) < 100 * 1024:  # –º–µ–Ω—å—à–µ 100 –ö–ë
            await update.message.reply_text("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 100 –ö–ë.")
            return

        await update.message.reply_text("üéô –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        text = await transcribe_file(file_path)

        if text:
            await update.message.reply_text("‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:\n\n" + text)
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª –∏–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫.")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# ======== –ó–ê–ü–£–°–ö –ë–û–¢–ê ========
if __name__ == "__main__":
    if not BOT_TOKEN:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        exit(1)

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    app.run_polling()
